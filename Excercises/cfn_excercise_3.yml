Parameters:
  AmiId:
    Type: String
    Default: 'ami-0922553b7b0369273'
  MyKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Default: FirstKeyPair
Resources:
  BasicHTTPSG:
    Type: AWS::EC2::SecurityGroup 
    Properties:
      GroupName: 'BasicSG'
      GroupDescription: 'Basic SG allow HTTP and SSH'
      SecurityGroupIngress:
        - 
          IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - 
          IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  EC2Instance1:
    Type: AWS::EC2::Instance 
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /var/wwww/html/index.html:
              content: 'Hello World!'
              mode: '000644'
              owner: 'root'
              group: 'root'
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/httpd/httpd.conf"
                source:
                  - "/var/www/html"
    Properties: 
      ImageId: !Ref AmiId
      InstanceType: t2.micro
      KeyName: !Ref MyKeyPair
      Tags:
        - Key: Name 
          Value: 'First EC2 Instance'
      SecurityGroups: 
        - !Ref BasicHTTPSG
      UserData:
        'Fn::Base64':
          !Sub |
              #!/bin/bash -xe
              # Ensure AWS CFN Bootstrp is the latest
              yum install -y aws-cfn-bootstrap
              # Install the files and packages from the metadata
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance1 --region ${AWS::Region}
              # Use cfn-signal to indicates whether EC2 instance was succesfully created or updated
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance1 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  EC2Instance2:
    Type: AWS::EC2::Instance 
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /var/wwww/html/index.html:
              content: 'Hello World!'
              mode: '000644'
              owner: 'root'
              group: 'root'
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/httpd/httpd.conf"
                source:
                  - "/var/www/html"
    Properties: 
      ImageId: !Ref AmiId
      InstanceType: t2.micro
      KeyName: !Ref MyKeyPair
      Tags:
        - Key: Name 
          Value: 'Second EC2 Instance'
      SecurityGroups: 
        - !Ref BasicHTTPSG
      UserData:
        'Fn::Base64':
          !Sub |
              #!/bin/bash -xe
              # Ensure AWS CFN Bootstrp is the latest
              yum install -y aws-cfn-bootstrap
              # Install the files and packages from the metadata
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance2 --region ${AWS::Region}
              # Use cfn-signal to indicates whether EC2 instance was succesfully created or updated
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance2 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  #Insert wait condition to signal success of 2 EC2 instance creation
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      # caution using load balancer name will not allow LB replacement without changing its name
      #LoadBalancerName: 'cfn-excercise-3-lb'
      #AZ or Subnets must be specified
      AvailabilityZones:
        Fn::GetAZs: ''
      Instances:
        - !Ref EC2Instance1
        - !Ref EC2Instance2
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: 'HTTP:80/index.html'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
  # WaitCondition:
  #   Type: AWS::CloudFormation::WaitCondition
  #   DependsOn:
  #     - EC2Instance1
  #     - EC2Instance2
  #   CreationPolicy:
  #       ResourceSignal:
  #         Timeout: PT5M
Outputs:
  ELBURL:
    Description: 'ELB URL'
    Value: !GetAtt ElasticLoadBalancer.DNSName
  EC2Instance1IP:
    Description: 'EC2 Instance 1 Public IP'
    Value: !GetAtt EC2Instance1.PublicIp
  EC2Instance2IP:
    Description: 'EC2 Instance 2 Public IP'
    Value: !GetAtt EC2Instance2.PublicIp
