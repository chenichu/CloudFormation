# Modified with VPC and Subnet Ids
# Change Set will recreate both SG and EC2 in this case
# After the modification SG description can be changed without resource replacement
Parameters:
  NameOfService:
    Description: "The name of service this stack is to used for."
    Type: String
  KeyName:
    Description: "Name of an existing EC2 Keypair to enable SSH access into the server"
    Type: AWS::EC2::KeyPair::KeyName
  VpcId:
    Description: Enter the VpcId
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Description: Enter the SubnetId
    Type: AWS::EC2::Subnet::Id
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0e6d2e8684d4ccb3e
    us-west-1:
      AMI: ami-0bcede71dd7fefe74
    eu-west-1:
      AMI: ami-0eafb5ee12a2cbffc
    ap-southeast-1:
      AMI: ami-0f67499750e64577a
    ap-southeast-2:
      AMI: ami-0f824ee742595b48a
Resources:
  Ec2Instance: # Logical Name
    Type: 'AWS::EC2::Instance'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /var/www/html/index.php:
              content: !Sub |
                <?php print "Hello world Abs was here!"; ?>
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      InstanceType: t2.micro
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - AMI
      Tags:
        - Key: "Name"
          Value: !Ref NameOfService
      SecurityGroups:
        - !Ref MySecurityGroup
      SubnetId: !Ref SubnetId
      KeyName: !Ref KeyName
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            # Ensure AWS CFN Bootstrp is the latest
            yum install -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}
  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "Open Port 80 Only"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
Outputs:
  Website:
    Description: 'The Public DNS for the EC2 Instance'
    Value: !Sub 'http://${Ec2Instance.PublicDnsName}'